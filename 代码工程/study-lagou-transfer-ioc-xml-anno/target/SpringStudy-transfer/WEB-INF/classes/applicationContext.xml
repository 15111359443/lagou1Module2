<?xml version="1.0" encoding="UTF-8" ?>
<!--根标签beans，里面配置一个又一个的bean子标签，每一个bean子标签都代表一个类的配置-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
              http://www.springframework.org/schema/beans
              https://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/context
              https://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/aop
              https://www.springframework.org/schema/aop/spring-aop.xsd
              http://www.springframework.org/schema/tx
              https://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--开启注解扫描，base-package指定扫描的包路径-->
    <context:component-scan base-package="com.lagou.study"/>

    <!--第三方jar中的bean定义在xml中-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/bank"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <!--
        lazy-init：延迟加载，true代表延迟，false代表立即加载，默认是false
    -->
    <bean id="lazyResult" class="com.lagou.study.pojo.Result" lazy-init="true">
    </bean>

    <bean id="companyBean" class="com.lagou.study.factory.CompanyFactoryBean">
        <property name="companyInfo" value="拉勾,中关村,500"/>
    </bean>

    <!--进行aop相关的xml配置,配置aop的过程其实就是把aop相关术语落地-->
    <!--横切逻辑bean-->
    <bean id="logUtils" class="com.lagou.study.utils.LogUtils"></bean>
    <!--使用config标签表明开始aop配置,在内部配置切面aspect-->

    <!-- aspect = 切入点（锁定方法）+ 方位点（锁定方法中的特殊时机）+ 横切逻辑 -->
    <!-- <aop:config> -->
        <!-- <aop:aspect id="logAspect" ref="logUtils"> -->

            <!-- 切入点锁定我们感兴趣的方法，使用aspectj语法表达式 -->
            <!-- <aop:pointcut id="pt1" expression="execution(* *..*.*(..))"/> -->
            <!-- <aop:pointcut id="pt1" expression="execution(public void com.lagou.study.service.impl.TransferServiceImpl.transfer(java.lang.String, java.lang.String, int ))"/> -->
            <!-- <aop:pointcut id="pt1" expression="execution(* com.lagou.study.service.impl.TransferServiceImpl.*(..))"/> -->


            <!-- 方位信息,pointcut-ref关联切入点 -->
            <!-- aop:before前置通知/增强 -->
            <!-- <aop:before method="beforeMethod" pointcut-ref="pt1"/> -->

            <!-- aop:after，最终通知，无论如何都执行 -->
            <!-- <aop:after method="afterMethod" pointcut-ref="pt1"/>-->

            <!-- aop:after-returnning，正常执行通知 -->
            <!-- <aop:after-returning method="successMethod" returning="retVal" pointcut-ref="pt1"/> -->

            <!-- aop:after-throwing，异常通知 -->
            <!-- <aop:after-throwing method="exceptionMethod" pointcut-ref="pt1"/>-->

            <!-- aop:around，环绕通知，与上面几种通知不可混用，用了 环绕通知，就不能用上面几种通知 -->
            <!-- <aop:around method="arroundMethod" pointcut-ref="pt1"/> -->
        <!-- </aop:aspect> -->
    <!-- </aop:config> -->



    <!--开启aop注解驱动
        属性 proxy-target-class：true 强制使用 cglib 动态代理
    -->
<!--    <aop:aspectj-autoproxy/>-->

    <!-- 声明式事务 -->
    <!--横切逻辑-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg name="dataSource" ref="dataSource"></constructor-arg>
    </bean>

    <!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
    <!--定制事务细节，传播行为、隔离级别等-->
    <!--        <tx:attributes>-->
    <!--一般性配置-->
    <!--            <tx:method name="*" read-only="false" propagation="REQUIRED" isolation="DEFAULT" timeout="-1"/>-->
    <!--针对查询的覆盖性配置-->
    <!--            <tx:method name="query*" read-only="true" propagation="SUPPORTS"/>-->
    <!--        </tx:attributes>-->
    <!--    </tx:advice>-->

    <!--    <aop:config>-->
    <!--advice-ref指向增强=横切逻辑+方位-->
    <!--        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.lagou.edu.service.impl.TransferServiceImpl.*(..))"/>-->
    <!--    </aop:config>-->

    <!--声明式事务的注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


</beans>